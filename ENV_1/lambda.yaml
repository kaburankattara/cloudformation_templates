AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Description: Type of this environment.
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - staging
      - dev
  SystemName:
    Description: Name of this system.
    Type: String
    Default: my-Lambda
  TypeFront:
    Type: String
    Default: front
  TypeApp:
    Type: String
    Default: app
  TypeBastion:
    Type: String
    Default: bastion
  SpaceChar:
    Type: String
    Default: '-'
  AvailabilityZone1:
    Type: String
    Default: ap-northeast-1a
  VpcName:
    Type: String
    Default: vpc
  VpcCidrBlock:
    Type: String
    Default: 192.168.16.0/20
  FrontSubnetName:
    Type: String
    Default: front-Subnet
  FrontSubnetCidrBlock:
    Type: String
    Default: 192.168.20.0/24
  BastionSubnetName:
    Type: String
    Default: bastion-subnet
  BastionSubnetCidrBlock:
    Type: String
    Default: 192.168.17.0/24
  AppSubnetName:
    Type: String
    Default: app-subnet
  AppSubnetCidrBlock:
    Type: String
    Default: 192.168.30.0/24
  InternetGatewayName:
    Type: String
    Default: internetGateway
  FrontRTName:
    Type: String
    Default: front-rt
  NatEIPName:
    Type: String
    Default: nat-ip
  NatGatewayName:
    Type: String
    Default: natGateway
  NatRTName:
    Type: String
    Default: nat-rt
  DefaultSecurityGroup:
    Type: String
    Default: default-sg
  SshSecurityGroup:
    Type: String
    Default: ssh-sg
  FrontSecurityGroup:
    Type: String
    Default: front-sg
  AppSecurityGroup:
    Type: String
    Default: app-sg


  MyVpcId:
    Type: String
  MyAppSubnetId:
    Type: String
  MyAppSGId:
    Type: String

Resources:

  LambdaEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: String
      Name: execLambda
      RoleArn: !GetAtt MyLambdaRole.Arn
      ScheduleExpression: cron(00,30 0-14,21-23 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt MyLambda.Arn
          Id: lambda

  MyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt MyLambdaRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import urllib
          import urllib.request
          import html.parser
          from socket import error as SocketError
          from http.cookiejar import CookieJar

          def lambda_handler(func,*args):
              try:
                  req=urllib.request.Request('https://www.google.com/?hl=ja', None, {'User-Agent': 'Mozilla/5.0 (X11; Linux i686; G518Rco3Yp0uLV40Lcc9hAzC1BOROTJADjicLjOmlr4=) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36','Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8','Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3','Accept-Encoding': 'gzip, deflate, sdch','Accept-Language': 'en-US,en;q=0.8','Connection': 'keep-alive'})
                  cj = CookieJar()
                  opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
                  response = opener.open(req)
                  print(response)
                  response.close()
              except urllib.request.HTTPError as inst:
                  output = format(inst)
                  print(output)
      Description: Invoke a function during stack creation.
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSG
        SubnetIds:
          - !Ref MyAppSubnetId


  LambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${SystemName}-${Environment}-Lambda-sg'
      GroupName: !Sub '${SystemName}-${Environment}-Lambda-sg'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: outbound
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: inbound
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: inbound
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub '${SystemName}-${Environment}-Lambda-sg'
      VpcId: !Ref MyVpcId

  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Lambda role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: "/"
      RoleName: "LambdaRole"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEvent.Arn
